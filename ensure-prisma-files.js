// ensure-prisma-files.js
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('Running enhanced file and module verification script...');

// Function to ensure a directory exists
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    console.log(`Creating directory: ${dirPath}`);
    fs.mkdirSync(dirPath, { recursive: true });
    return true;
  }
  return false;
}

// Function to log directory contents
function logDirectoryContents(dirPath, label) {
  try {
    if (fs.existsSync(dirPath)) {
      console.log(`\n${label} directory contents:`);
      const files = fs.readdirSync(dirPath);
      files.forEach(file => {
        const fullPath = path.join(dirPath, file);
        const stats = fs.statSync(fullPath);
        console.log(`- ${file} (${stats.isDirectory() ? 'directory' : 'file'}, ${stats.size} bytes)`);
      });
    } else {
      console.log(`\n${label} directory does not exist.`);
    }
  } catch (error) {
    console.error(`Error reading ${label} directory:`, error);
  }
}

// Function to verify a module exists in node_modules
function verifyModule(moduleName) {
  const modulePath = path.join(process.cwd(), 'node_modules', moduleName);
  const exists = fs.existsSync(modulePath);
  console.log(`Module ${moduleName}: ${exists ? 'Found' : 'NOT FOUND'}`);
  return exists;
}

try {
  console.log('Current working directory:', process.cwd());
  
  // 1. Check Package.json existence
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  if (!fs.existsSync(packageJsonPath)) {
    console.error('ERROR: package.json not found! This is a critical error.');
    // Create a minimal package.json to prevent further errors
    fs.writeFileSync(packageJsonPath, JSON.stringify({
      "name": "anonymous-feedback-app",
      "version": "0.1.0",
      "private": true,
      "dependencies": {
        "@prisma/client": "6.8.1",
        "prisma": "6.8.1",
        "next": "14.1.0",
        "react": "18.2.0",
        "react-dom": "18.2.0"
      }
    }, null, 2));
    console.log('Created a minimal package.json file');
  } else {
    console.log('package.json found');
  }
  
  // 2. Ensure prisma directory exists
  const prismaDir = path.join(process.cwd(), 'prisma');
  ensureDirectoryExists(prismaDir);
  
  // 3. Create all necessary Prisma files
  
  // 3.1 Create client.npg.graphql if missing
  const graphqlPath = path.join(prismaDir, 'client.npg.graphql');
  if (!fs.existsSync(graphqlPath)) {
    console.log(`Creating client.npg.graphql file...`);
    fs.writeFileSync(graphqlPath, '# GraphQL schema generated by Prisma\n');
    console.log('Created client.npg.graphql file');
  }
  
  // 3.2 Check for schema.prisma
  const schemaPath = path.join(prismaDir, 'schema.prisma');
  if (!fs.existsSync(schemaPath)) {
    console.error('CRITICAL: schema.prisma file not found!');
    console.log('Searching for schema.prisma in other locations...');
    
    // Search for schema.prisma in common locations
    const possibleLocations = [
      path.join(process.cwd(), 'src', 'prisma', 'schema.prisma'),
      path.join(process.cwd(), 'app', 'prisma', 'schema.prisma'),
      path.join(process.cwd(), 'schema.prisma')
    ];
    
    let schemaFound = false;
    for (const location of possibleLocations) {
      if (fs.existsSync(location)) {
        console.log(`Found schema.prisma at ${location}`);
        // Copy it to the expected location
        fs.copyFileSync(location, schemaPath);
        console.log(`Copied schema.prisma to ${schemaPath}`);
        schemaFound = true;
        break;
      }
    }
    
    if (!schemaFound) {
      console.log('Creating minimal schema.prisma file...');
      
      // Create a minimal schema
      const minimalSchema = `// This is a minimal schema created during build
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

// Minimal User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
}
`;
      
      fs.writeFileSync(schemaPath, minimalSchema);
      console.log('Created minimal schema.prisma file');
    }
  } else {
    console.log('Found schema.prisma at expected location');
    
    // Check if schema.prisma has correct binary targets
    const schemaContent = fs.readFileSync(schemaPath, 'utf8');
    if (!schemaContent.includes('binaryTargets')) {
      console.log('Updating schema.prisma with binary targets...');
      
      const updatedSchema = schemaContent.replace(
        'generator client {',
        'generator client {\n  binaryTargets = ["debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]'
      );
      
      fs.writeFileSync(schemaPath, updatedSchema);
      console.log('Updated schema.prisma with binary targets');
    } else if (schemaContent.includes('"native"')) {
      console.log('Removing "native" from binary targets...');
      
      let updatedSchema = schemaContent;
      updatedSchema = updatedSchema.replace('"native",', '');
      updatedSchema = updatedSchema.replace(', "native"', '');
      updatedSchema = updatedSchema.replace('"native"', '"debian-openssl-3.0.x"');
      
      fs.writeFileSync(schemaPath, updatedSchema);
      console.log('Removed "native" from binary targets');
    }
  }
  
  // 4. Ensure Prisma client directory exists
  const clientDir = path.join(process.cwd(), 'node_modules', '@prisma', 'client');
  ensureDirectoryExists(path.join(process.cwd(), 'node_modules', '@prisma'));
  ensureDirectoryExists(clientDir);
  
  // 5. Ensure .prisma directory exists in node_modules
  const prismaBinariesDir = path.join(process.cwd(), 'node_modules', '.prisma');
  ensureDirectoryExists(prismaBinariesDir);
  
  // 6. Create engines directory in .prisma
  const enginesDir = path.join(prismaBinariesDir, 'engines');
  ensureDirectoryExists(enginesDir);
  
  // 7. Create engine_manifest.json file if missing
  const manifestPath = path.join(prismaBinariesDir, 'engine_manifest.json');
  if (!fs.existsSync(manifestPath)) {
    console.log(`Creating engine_manifest.json file...`);
    const manifest = {
      "version": "6.8.1",
      "engines": []
    };
    fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
    console.log('Created engine_manifest.json file');
  }
  
  // 8. Verify critical modules exist
  console.log('\nVerifying critical modules:');
  const criticalModules = [
    '@prisma/client',
    'prisma',
    'next',
    'react',
    'react-dom',
    'buffer',
    'crypto-browserify',
    'stream-browserify'
  ];
  
  const missingModules = [];
  criticalModules.forEach(module => {
    if (!verifyModule(module)) {
      missingModules.push(module);
    }
  });
  
  if (missingModules.length > 0) {
    console.log(`\nWARNING: Found ${missingModules.length} missing modules: ${missingModules.join(', ')}`);
    console.log('Attempting to install missing modules...');
    
    try {
      // Try to install missing modules
      const installCmd = `pnpm install ${missingModules.join(' ')} --no-frozen-lockfile`;
      console.log(`Running: ${installCmd}`);
      execSync(installCmd, { stdio: 'inherit' });
      console.log('Module installation completed');
    } catch (installError) {
      console.error('Error installing missing modules:', installError.message);
      console.log('Continuing with build despite module installation errors');
    }
  } else {
    console.log('All critical modules are present');
  }
  
  // 9. Log directory contents for debugging
  logDirectoryContents(process.cwd(), 'Root');
  logDirectoryContents(prismaDir, 'Prisma');
  logDirectoryContents(path.join(process.cwd(), 'node_modules', '@prisma'), '@prisma');
  logDirectoryContents(prismaBinariesDir, '.prisma');
  
  // 10. Log the node_modules/.bin directory to check for executable links
  logDirectoryContents(path.join(process.cwd(), 'node_modules', '.bin'), 'node_modules/.bin');
  
  // 11. Create dummy files for common missing modules
  const commonMissingFiles = [
    ['next/dist/compiled/@edge-runtime/primitives/cache.js', '// Dummy cache.js file created during build\nmodule.exports = {};\n'],
    ['next/dist/compiled/semver.js', '// Dummy semver.js file created during build\nmodule.exports = require("semver");\n'],
    ['next/dist/compiled/postcss/opticss.d.ts', '// Dummy opticss.d.ts file created during build\n']
  ];
  
  for (const [filePath, content] of commonMissingFiles) {
    const fullPath = path.join(process.cwd(), 'node_modules', filePath);
    const dirPath = path.dirname(fullPath);
    
    if (!fs.existsSync(fullPath) && !fs.existsSync(dirPath)) {
      console.log(`Creating directory for ${filePath}...`);
      fs.mkdirSync(dirPath, { recursive: true });
      
      console.log(`Creating dummy file for ${filePath}...`);
      fs.writeFileSync(fullPath, content);
      console.log(`Created dummy file for ${filePath}`);
    }
  }
  
  // 12. Print environment variables
  console.log('\nEnvironment variables:');
  console.log('- NODE_ENV:', process.env.NODE_ENV || 'not set');
  console.log('- PRISMA_BINARY_PLATFORM:', process.env.PRISMA_BINARY_PLATFORM || 'not set');
  console.log('- PRISMA_CLI_BINARY_TARGETS:', process.env.PRISMA_CLI_BINARY_TARGETS || 'not set');
  console.log('- PRISMA_CLIENT_ENGINE_TYPE:', process.env.PRISMA_CLIENT_ENGINE_TYPE || 'not set');
  console.log('- DATABASE_URL:', process.env.DATABASE_URL ? 'set (hidden)' : 'not set');
  console.log('- DIRECT_URL:', process.env.DIRECT_URL ? 'set (hidden)' : 'not set');
  
  console.log('\nFile and module verification completed successfully');
} catch (error) {
  console.error('Error during file and module verification:', error);
  console.log('Continuing with build despite errors');
}
